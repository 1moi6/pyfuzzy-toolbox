"""
Exemplo: Modelo de Crescimento Populacional com p-Fuzzy
=========================================================

Demonstra o uso de sistemas p-fuzzy para modelar din√¢mica populacional
onde a taxa de crescimento depende da densidade populacional atual.

Modelo cl√°ssico: Equa√ß√£o Log√≠stica
dx/dt = r*x*(1 - x/K)

onde:
- x: popula√ß√£o
- r: taxa de crescimento intr√≠nseca
- K: capacidade de carga

Aqui implementamos uma vers√£o fuzzy onde as regras determinam
a taxa de crescimento baseada na popula√ß√£o atual.
"""

import sys
sys.path.insert(0, '/Users/1moi6/Desktop/Minicurso Fuzzy/fuzzy_systems')

import numpy as np
import fuzzy_systems as fs
import matplotlib.pyplot as plt

print("=" * 70)
print("EXEMPLO: Crescimento Populacional com p-Fuzzy")
print("=" * 70)

# ============================================================================
# PARTE 1: Criar Sistema de Infer√™ncia Fuzzy
# ============================================================================

print("\n1Ô∏è‚É£  Criando Sistema de Infer√™ncia Fuzzy...")

# Sistema Mamdani para determinar taxa de crescimento
fis = fs.MamdaniSystem(name="Popula√ß√£o Log√≠stica Fuzzy")

# Entrada: popula√ß√£o atual (normalizada, 0 a 100)
fis.add_input('population', (0, 100))
fis.add_term('population', 'baixa', 'gaussian', (0, 15))
fis.add_term('population', 'media', 'gaussian', (50, 15))
fis.add_term('population', 'alta', 'gaussian', (100, 15))

# Sa√≠da: taxa de crescimento (pode ser negativa)
fis.add_output('growth_rate', (-5, 10))
fis.add_term('growth_rate', 'declinio', 'triangular', (-5, -5, 0))
fis.add_term('growth_rate', 'estavel', 'triangular', (-2, 0, 2))
fis.add_term('growth_rate', 'crescimento', 'triangular', (0, 10, 10))

# Regras: Popula√ß√£o baixa -> crescimento alto
#         Popula√ß√£o m√©dia -> crescimento moderado
#         Popula√ß√£o alta -> decl√≠nio
fis.add_rule({
    'population': 'baixa'
}, {
    'growth_rate': 'crescimento'
})

fis.add_rule({
    'population': 'media'
}, {
    'growth_rate': 'estavel'
})

fis.add_rule({
    'population': 'alta'
}, {
    'growth_rate': 'declinio'
})

print(f"‚úÖ FIS criado:")
print(f"   ‚Ä¢ {len(fis.input_variables)} entrada: {list(fis.input_variables.keys())}")
print(f"   ‚Ä¢ {len(fis.output_variables)} sa√≠da: {list(fis.output_variables.keys())}")
print(f"   ‚Ä¢ {len(fis.rule_base.rules)} regras")


# ============================================================================
# PARTE 2: Sistema Discreto (modo absoluto)
# ============================================================================

print("\n\n" + "=" * 70)
print("2Ô∏è‚É£  Sistema DISCRETO (modo absoluto)")
print("=" * 70)
print("Equa√ß√£o: x_{n+1} = x_n + f(x_n)")

# Criar sistema p-fuzzy discreto
pfuzzy_discrete = fs.dynamic.PFuzzyDiscrete(
    fis=fis,
    mode='absolute',
    state_vars=['population'],
    dt=0.1  # Passo de tempo
)

# Simular
print("\nüìä Simulando 100 itera√ß√µes com x0 = 10...")
trajectory_discrete = pfuzzy_discrete.simulate(
    x0={'population': 10},
    n_steps=100
)

print(f"‚úÖ Simula√ß√£o conclu√≠da!")
print(f"   ‚Ä¢ Popula√ß√£o inicial: {trajectory_discrete[0, 0]:.2f}")
print(f"   ‚Ä¢ Popula√ß√£o final: {trajectory_discrete[-1, 0]:.2f}")
print(f"   ‚Ä¢ Popula√ß√£o m√°xima: {trajectory_discrete[:, 0].max():.2f}")


# ============================================================================
# PARTE 3: Sistema Cont√≠nuo (modo absoluto)
# ============================================================================

print("\n\n" + "=" * 70)
print("3Ô∏è‚É£  Sistema CONT√çNUO (modo absoluto)")
print("=" * 70)
print("Equa√ß√£o: dx/dt = f(x)")

# Criar sistema p-fuzzy cont√≠nuo
pfuzzy_continuous = fs.dynamic.PFuzzyContinuous(
    fis=fis,
    mode='absolute',
    state_vars=['population'],
    method='rk4'  # Runge-Kutta 4¬™ ordem
)

# Simular
print("\nüìä Simulando de t=0 a t=10 com x0 = 10...")
trajectory_continuous = pfuzzy_continuous.simulate(
    x0={'population': 10},
    t_span=(0, 10),
    dt=0.01
)

print(f"‚úÖ Simula√ß√£o conclu√≠da!")
print(f"   ‚Ä¢ Popula√ß√£o inicial: {trajectory_continuous[0, 0]:.2f}")
print(f"   ‚Ä¢ Popula√ß√£o final: {trajectory_continuous[-1, 0]:.2f}")
print(f"   ‚Ä¢ Popula√ß√£o m√°xima: {trajectory_continuous[:, 0].max():.2f}")


# ============================================================================
# PARTE 4: Sistema Cont√≠nuo (modo relativo)
# ============================================================================

print("\n\n" + "=" * 70)
print("4Ô∏è‚É£  Sistema CONT√çNUO (modo relativo)")
print("=" * 70)
print("Equa√ß√£o: dx/dt = x * f(x)")

# Criar sistema com modo relativo
pfuzzy_relative = fs.dynamic.PFuzzyContinuous(
    fis=fis,
    mode='relative',
    state_vars=['population'],
    method='rk4'
)

# Simular
print("\nüìä Simulando de t=0 a t=10 com x0 = 10...")
trajectory_relative = pfuzzy_relative.simulate(
    x0={'population': 10},
    t_span=(0, 10),
    dt=0.01
)

print(f"‚úÖ Simula√ß√£o conclu√≠da!")
print(f"   ‚Ä¢ Popula√ß√£o inicial: {trajectory_relative[0, 0]:.2f}")
print(f"   ‚Ä¢ Popula√ß√£o final: {trajectory_relative[-1, 0]:.2f}")
print(f"   ‚Ä¢ Popula√ß√£o m√°xima: {trajectory_relative[:, 0].max():.2f}")


# ============================================================================
# PARTE 5: Visualiza√ß√£o Comparativa
# ============================================================================

print("\n\n" + "=" * 70)
print("5Ô∏è‚É£  Visualiza√ß√£o Comparativa")
print("=" * 70)

# Criar figura com 2 subplots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))

# Plot 1: Compara√ß√£o Discreto vs Cont√≠nuo (modo absoluto)
ax1.plot(pfuzzy_discrete.time, pfuzzy_discrete.trajectory,
         'b-o', markersize=4, label='Discreto (absoluto)', linewidth=2)
ax1.plot(pfuzzy_continuous.time, pfuzzy_continuous.trajectory,
         'r-', label='Cont√≠nuo (absoluto)', linewidth=2)
ax1.set_xlabel('Tempo', fontsize=12)
ax1.set_ylabel('Popula√ß√£o', fontsize=12)
ax1.set_title('Discreto vs Cont√≠nuo (modo absoluto)', fontsize=14, fontweight='bold')
ax1.legend()
ax1.grid(True, alpha=0.3)

# Plot 2: Compara√ß√£o Absoluto vs Relativo (cont√≠nuo)
ax2.plot(pfuzzy_continuous.time, pfuzzy_continuous.trajectory,
         'g-', label='Absoluto: dx/dt = f(x)', linewidth=2)
ax2.plot(pfuzzy_relative.time, pfuzzy_relative.trajectory,
         'm-', label='Relativo: dx/dt = x*f(x)', linewidth=2)
ax2.set_xlabel('Tempo', fontsize=12)
ax2.set_ylabel('Popula√ß√£o', fontsize=12)
ax2.set_title('Modo Absoluto vs Relativo', fontsize=14, fontweight='bold')
ax2.legend()
ax2.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('/tmp/pfuzzy_population_comparison.png', dpi=150, bbox_inches='tight')
print("\n‚úì Gr√°fico salvo em: /tmp/pfuzzy_population_comparison.png")


# ============================================================================
# PARTE 6: An√°lise da Superf√≠cie de Controle
# ============================================================================

print("\n\n" + "=" * 70)
print("6Ô∏è‚É£  Superf√≠cie de Controle Fuzzy")
print("=" * 70)

# Avaliar FIS para diferentes valores de popula√ß√£o
pop_values = np.linspace(0, 100, 100)
growth_values = []

for pop in pop_values:
    result = fis.evaluate({'population': pop})
    growth_values.append(result['growth_rate'])

# Plot da superf√≠cie
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(pop_values, growth_values, 'b-', linewidth=3)
ax.axhline(y=0, color='k', linestyle='--', alpha=0.3)
ax.set_xlabel('Popula√ß√£o', fontsize=12)
ax.set_ylabel('Taxa de Crescimento', fontsize=12)
ax.set_title('Superf√≠cie de Controle: f(popula√ß√£o) ‚Üí taxa de crescimento',
            fontsize=14, fontweight='bold')
ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('/tmp/pfuzzy_control_surface.png', dpi=150, bbox_inches='tight')
print("\n‚úì Gr√°fico salvo em: /tmp/pfuzzy_control_surface.png")


# ============================================================================
# RESUMO
# ============================================================================

print("\n\n" + "=" * 70)
print("RESUMO")
print("=" * 70)

print("""
‚úÖ SISTEMAS P-FUZZY IMPLEMENTADOS:

1. Sistema Discreto (absoluto):
   x_{n+1} = x_n + f(x_n)
   ‚Üí Mudan√ßa absoluta a cada itera√ß√£o

2. Sistema Cont√≠nuo (absoluto):
   dx/dt = f(x)
   ‚Üí Taxa de mudan√ßa determinada pelo FIS

3. Sistema Cont√≠nuo (relativo):
   dx/dt = x * f(x)
   ‚Üí Taxa proporcional ao estado atual

üîë CONCEITOS-CHAVE:

‚Ä¢ O FIS mapeia estado ‚Üí taxa de mudan√ßa
‚Ä¢ Regras fuzzy codificam din√¢mica do sistema
‚Ä¢ Diferentes modos capturam diferentes comportamentos
‚Ä¢ Integra√ß√£o num√©rica (Euler/RK4) para sistemas cont√≠nuos

üìä APLICA√á√ïES:

‚Ä¢ Modelos populacionais
‚Ä¢ Din√¢mica de epidemias
‚Ä¢ Sistemas de controle
‚Ä¢ Processos biol√≥gicos
‚Ä¢ Din√¢mica econ√¥mica

üéØ PR√ìXIMOS PASSOS:

1. Experimente com diferentes regras fuzzy
2. Teste outros m√©todos de integra√ß√£o
3. Compare com modelos cl√°ssicos (log√≠stico, Lotka-Volterra)
4. Adicione m√∫ltiplas vari√°veis de estado
""")

print("=" * 70)
print("‚úÖ Exemplo conclu√≠do!")
print("=" * 70)
