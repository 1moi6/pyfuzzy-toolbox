"""
Exemplo Simples: Sistema p-Fuzzy
=================================

Demonstra o uso b√°sico de sistemas p-fuzzy com c√≥digo m√≠nimo.
"""

import sys
sys.path.insert(0, '/Users/1moi6/Desktop/Minicurso Fuzzy/fuzzy_systems')

import numpy as np
import fuzzy_systems as fs
import matplotlib.pyplot as plt

print("=" * 70)
print("Exemplo Simples: Sistema p-Fuzzy")
print("=" * 70)

# ============================================================================
# Passo 1: Criar Sistema de Infer√™ncia Fuzzy
# ============================================================================

print("\n1. Criando FIS...")

fis = fs.MamdaniSystem(name="Modelo Simples")

# Entrada: estado atual
fis.add_input('x', (0, 10))
fis.add_term('x', 'baixo', 'triangular', (0, 0, 5))
fis.add_term('x', 'medio', 'triangular', (2, 5, 8))
fis.add_term('x', 'alto', 'triangular', (5, 10, 10))

# Sa√≠da: taxa de mudan√ßa
fis.add_output('dx', (-2, 2))
fis.add_term('dx', 'diminui', 'triangular', (-2, -2, 0))
fis.add_term('dx', 'estavel', 'triangular', (-0.5, 0, 0.5))
fis.add_term('dx', 'aumenta', 'triangular', (0, 2, 2))

# Regras simples:
# - Se x √© baixo ‚Üí aumenta
# - Se x √© m√©dio ‚Üí est√°vel
# - Se x √© alto ‚Üí diminui
fis.add_rule({'x': 'baixo'}, {'dx': 'aumenta'})
fis.add_rule({'x': 'medio'}, {'dx': 'estavel'})
fis.add_rule({'x': 'alto'}, {'dx': 'diminui'})

print(f"‚úÖ FIS criado: {len(fis.rule_base.rules)} regras")


# ============================================================================
# Passo 2: Criar Sistema p-Fuzzy
# ============================================================================

print("\n2. Criando sistema p-fuzzy...")

# Modo cont√≠nuo: dx/dt = f(x)
# state_vars √© inferido automaticamente das entradas do FIS!
pfuzzy = fs.dynamic.PFuzzyContinuous(
    fis=fis,
    mode='absolute',
    method='rk4'
)

print("‚úÖ Sistema p-fuzzy criado")


# ============================================================================
# Passo 3: Simular
# ============================================================================

print("\n3. Simulando...")

# x0 pode ser dicion√°rio, lista, tupla ou array!
trajectory = pfuzzy.simulate(
    x0=[1],           # Condi√ß√£o inicial (tamb√©m aceita {'x': 1}, (1,), etc.)
    t_span=(0, 20),   # Tempo: 0 a 20
    dt=0.01           # Passo de integra√ß√£o
)

print(f"‚úÖ Simula√ß√£o conclu√≠da!")
print(f"   x(0) = {trajectory[0, 0]:.2f}")
print(f"   x(20) = {trajectory[-1, 0]:.2f}")


# ============================================================================
# Passo 4: Visualizar
# ============================================================================

print("\n4. Gerando visualiza√ß√µes...")

# Plot 1: Trajet√≥ria
pfuzzy.plot_trajectory(title='Evolu√ß√£o Temporal')
plt.savefig('/tmp/pfuzzy_simple_trajectory.png', dpi=150, bbox_inches='tight')
plt.close()
print("‚úì Trajet√≥ria salva em: /tmp/pfuzzy_simple_trajectory.png")

# Plot 2: Superf√≠cie de controle
x_vals = np.linspace(0, 10, 100)
dx_vals = [fis.evaluate({'x': x})['dx'] for x in x_vals]

fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(x_vals, dx_vals, 'b-', linewidth=3)
ax.axhline(y=0, color='k', linestyle='--', alpha=0.3, label='Equil√≠brio (dx=0)')
ax.set_xlabel('Estado x', fontsize=12)
ax.set_ylabel('Taxa de mudan√ßa dx/dt', fontsize=12)
ax.set_title('Superf√≠cie de Controle Fuzzy', fontsize=14, fontweight='bold')
ax.grid(True, alpha=0.3)
ax.legend()
plt.tight_layout()
plt.savefig('/tmp/pfuzzy_simple_control.png', dpi=150, bbox_inches='tight')
plt.close()
print("‚úì Superf√≠cie salva em: /tmp/pfuzzy_simple_control.png")


# ============================================================================
# Resumo
# ============================================================================

print("\n" + "=" * 70)
print("RESUMO")
print("=" * 70)

print("""
‚úÖ Sistema p-fuzzy criado com sucesso!

üìù Estrutura:
   ‚Ä¢ 1 entrada (x) ‚Üí estado do sistema
   ‚Ä¢ 1 sa√≠da (dx) ‚Üí taxa de mudan√ßa
   ‚Ä¢ 3 regras ‚Üí l√≥gica de controle

üîÑ Din√¢mica:
   ‚Ä¢ Equa√ß√£o: dx/dt = f(x)
   ‚Ä¢ f(x) √© determinado por regras fuzzy
   ‚Ä¢ Sistema busca equil√≠brio em x ‚âà 5

üí° Conceitos-chave:
   ‚Ä¢ As ENTRADAS do FIS s√£o as vari√°veis de ESTADO
   ‚Ä¢ As SA√çDAS do FIS s√£o as TAXAS DE MUDAN√áA
   ‚Ä¢ N√£o precisa especificar mapeamento - √© autom√°tico!
   ‚Ä¢ A ordem das sa√≠das corresponde √† ordem dos estados

üéØ Uso t√≠pico (SUPER SIMPLES!):

   # 1. Criar FIS com entradas = estados, sa√≠das = taxas
   fis = fs.MamdaniSystem()
   fis.add_input('population', ...)    # Estado
   fis.add_output('growth', ...)       # Taxa de mudan√ßa

   # 2. Criar p-fuzzy (infer√™ncia autom√°tica!)
   pfuzzy = fs.dynamic.PFuzzyContinuous(fis)  # ‚Üê S√≥ isso!

   # 3. Simular (x0 aceita dict, lista, tupla ou array)
   trajectory = pfuzzy.simulate(x0=[10], t_span=(0, 50))

   # 4. Visualizar
   pfuzzy.plot_trajectory()
""")

print("=" * 70)
print("‚úÖ Exemplo conclu√≠do!")
print("=" * 70)
